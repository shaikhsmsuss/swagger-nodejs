openapi: 3.0.0
info:
  version: 1.0.0
  title: Sample spec
  description: Sample spec for Swagger
  termsOfService: http://swagger.io/terms/
basePath: "/api/profile"
tags:
  - name: Devconnector
    description: develpers social network website
schemes:
  - https
securityDefinitions:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/users/register:
    post:
      tags:
        - "user"
      summary: "Pleae Sign up"
      description: Create a new user in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              objectExample:
                $ref: "#/components/examples/sampleUser"
  /api/users/login:
    post:
      tags:
        - "user"
      summary: "Please Sign in"
      description: login the user in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              objectExample:
                $ref: "#/components/examples/sampleUser"
  /api/profile:
    get:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: "get user's profile "
      description: Retrieve all the users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
              examples: {}
    post:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: "Create Profile data"
      description: User can create their profile data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
            example:
              objectExample:
                $ref: "#/components/examples/Userprofile"

    delete:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: "User can delete their complete profile "
      description: Authorize access
      operationId: UserProfile
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Delete complete profile of the user.
    produces:
      - application/json
  /api/profile/experience:
    post:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: Creating User's experience data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Experience"
            example:
              objectExample:
                $ref: "#/components/examples/Experience"
  /api/profile/education:
    post:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: Creating User's education data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Education"
            example:
              objectExample:
                $ref: "#/components/examples/Education"

  /api/profile/experience/:exp_id:
    delete:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: "User can delete the experience "
      description: Authorize access
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The user's experience ID.
    produces:
      - application/json
  /api/profile/education/:edu_id:
    delete:
      security:
        Bearer: []
      tags:
        - "profile"
      summary: "User can delete the education data "
      description: Authorize access
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The profile education ID.
    produces:
      - application/json

  /api/post:
    get:
      tags:
        - "Posts"
      summary: Get all the posts by user
      description: Authorize access
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
              examples: {}
    post:
      security:
        Bearer: []
      tags:
        - "Posts"
      summary: write a post
      description: The authorize user can make a post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Posts"
            example:
              objectExample:
                $ref: "#/components/examples/Post"
  /api/post/:id:
    get:
      security:
        Bearer: []
      tags:
        - "Posts"
      summary: find a specific post by postId
      description: Access public
      operationId: UserPosts
    produces:
      - application/json
    delete:
      security:
        Bearer: []
      tags:
        - "Posts"
      summary: delete the user's post
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Find posts with specified ID
  /api/post/like/:id:
    post:
      security:
        Bearer: []
      tags:
        - "Posts"
      summary: like the user's post
      description: Authorize acc
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The comment ID.
    produces:
      - application/json
  /api/post/unlike/:id:
    post:
      security:
        Bearer: []
      tags:
        - "Posts"
      summary: Unlike the user's post
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The like ID.
    produces:
      - application/json
  /api/post/comment/:id:
    post:
      security:
        Bearer: []
      tags:
        - "Posts"
      summary: write a comment on the user's post
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The comment ID.
    produces:
      - application/json
  definitions:
components:
  schemas:
    User: # Schema name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example: # Object-level example
        name: Test
        email: test@testt.com
        password: 123
    Profile:
      type: object
      properties:
        handle:
          type: string
        company:
          type: string
        website:
          type: string
        location:
          type: string
        bio:
          type: string
        status:
          type: string
      example:
        handle: test
        company: test
        website: www.test.com
        location: test
        bio: test
        status: test
    Experience:
      type: object
      properties:
        title:
          type: string
        company:
          type: string
        location:
          type: string
        from:
          type: date
        to:
          type: date
        current:
          type: string
        description:
          type: string
      example:
        title: test
        company: test
        location: test
        from: 02-03-2018
        to: 02-03-2019
        current: developer
        description: test
    Education:
      type: object
      properties:
        school:
          type: string
        degree:
          type: string
        fieldofstudy:
          type: string
        from:
          type: date
        to:
          type: date
        current:
          type: string
        description:
          type: string
      example:
        school: test
        degree: test
        fieldofstudy: test
        from: 02-03-2018
        to: 02-03-2019
        current: developer
        description: test
    Posts:
      type: object
      properties:
        name:
          type: string
        text:
          type: string
        like:
          type: number
        unlike:
          type: number
  examples:
    sampleUser:
      value:
        name: test
        email: test@gmail.com
        password: 123
    Userprofile:
      value:
        handle: test
        company: test
        website: www.test.com
        location: test
        bio: test
        status: test
    Experience:
      value:
        title: test
        company: test
        location: test
        from: 02-03-2018
        to: 02-03-2019
        current: developer
        description: test
    Education:
      value:
        school: test
        degree: test
        fieldofstudy: test
        from: 02-03-2018
        to: 02-03-2019
        current: developer
        description: test
    Post:
      value:
        name: test
        text: this is the first post
        like: 2
        unlike: 1
