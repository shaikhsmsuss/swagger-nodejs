---
openapi: 3.0.0
info:
  version: 1.0.0
  title: Sample spec
  description: Sample spec for Swagger
  termsOfService: http://swagger.io/terms/
basePath: "/api/profile"
tags:
  - name: Devconnector
    description: develpers social network website
schemes:
  - https
securityDefinitions:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/users/register:
    post:
      tags:
        - User's Registration
      summary: Create new user registration
      requestBody:
        required: true
      operationId: creatUser
      description: Each user who needs to access to devconnector should signup
        using their valid email address and  set a password for authorize access
      parameters:
        - name: User
          in: body
          required: true
          schema:
            type: object
            name:
              type: string
            email:
              type: string
            password:
              type: string
            password2:
              type: string
          example:
              name: devconnector
              email: test@devconnector.com
              password: 123456
              password2: 123456    

  /api/users/login:
    post:
      tags:
        - User's Login
      summary: "Authorize and sign in the user "
      requestBody:
        required: true
      description: User's Login
      operationId: loginUser
      parameters:
        schema:
          type: object
          email:
            type: string
          password:
            type: string
      produces:
        - application/json
  /api/users/current:
    get:
      security:
        Bearer: []
      tags:
        - Current sign in User
      operationId: Get Profiles
      produces:
        - application/json
      parameters:
        - name: Current User
          in: "/api/users/current"
  /api/profile:
    get:
      security:
        Bearer: []
      tags:
        - Get User's profile
      summary: Get all user's profile data
      description: Returns the user's profile
      operationId: Get Profiles
      produces:
        - application/json
      parameters:
        - name: All User's
          in: "/api/profile"
          description: get the profile
    post:
      security:
        Bearer: []
      tags:
        - Create the User's profile data
      requestBody:
        required: true
      description: Returns the user's profile
      operationId: PostProfiles
      parameters:
        schema:
          type: object
          handle:
            type: string
          company:
            type: string
          website:
            type: string
          location:
            type: string
          bio:
            type: string
      produces:
        - application/json
  /api/profile/all:
    get:
      tags:
        - Get Profiles of all the user's
      description: User's profile
      operationId: User'sProfile
      produces:
        - application/json
  api/profile/experience:
    post:
      security:
        Bearer: []
      tags:
        - Post User's experience details
      summary: Creating User's experience data
      requestBody:
        required: true
      description: User's Profile
      operationId: UserProfile
      schema:
        type: object
        properties:
          title:
            type: string
          company:
            type: string
          lo:
            type: string
          from:
            type: date
          to:
            type: date
          current:
            type: string
          description:
            type: string
      produces:
        - application/json
  api/profile/education:
    post:
      security:
        Bearer: []
      tags:
        - Post User's education details
      summary: Creating User's education data
      requestBody:
        required: true
      description: Create User's Profile
      operationId: UserProfile
      schema:
        type: object
        properties:
          school:
            type: string
          degree:
            type: string
          fieldofstudy:
            type: string
          from:
            type: date
          to:
            type: date
          current:
            type: string
          description:
            type: string
      produces:
        - application/json
  /api/profile/experience/:exp_id:
    delete:
      security:
        Bearer: []
      tags:
        - Delete user experiene  by exp_Id
      summary: "User can delete the experience "
      description: Authorize access
      operationId: UserProfile
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The user's experience ID.
    produces:
      - application/json
  api/profile/education/:edu_id:
    delete:
      security:
        Bearer: []
      tags:
        - Delete user's education  by edu_Id
      summary: "User can delete the education "
      description: Authorize access
      operationId: UserProfile
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The profile education ID.
    produces:
      - application/json
  api/profile:
    delete:
      security:
        Bearer: []
      tags:
        - Delete user's complete profile
      summary: "User can delete their complete profile "
      description: Authorize access
      operationId: UserProfile
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Delete complete profile of the user.
    produces:
      - application/json
  api/post:
    get:
      tags:
        - Get Posts
      summary: Here User can upload posts
      description: User's Post route
      operationId: UserPosts
    produces:
      - application/json
    post:
      security:
        Bearer: []
      tags:
        - Upload Posts
      description: Here only Authorize user can upload posts
      operationId: postRoute
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Post some data
      produces:
        - application/json
  api/post/:id:
    get:
      security:
        Bearer: []
      tags:
        - Find posts
      summary: Here user's can find posts by postsId
      description: Access public
      operationId: UserPosts
    produces:
      - application/json
    delete:
      security:
        Bearer: []
      tags:
        - Delete Posts
      summary: Here authorize user can delete posts
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: Find posts with specified ID
  api/post/like/:id:
    post:
      security:
        Bearer: []
      tags:
        - Like posts
      summary: Authorized logged in user can like the posts
      description: Authorize acc
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The comment ID.
    produces:
      - application/json
  api/post/unlike/:id:
    post:
      security:definitions:
      Bearer: []
      tags:
        - Unlike posts
      summary: Authorized logged in user can unlike the posts
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The like ID.
    produces:
      - application/json
  api/post/comment/:id:
    post:
      security:
        Bearer: []
      tags:
        - Comment on posts
      summary: Authorized logged in user can comment the posts
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The comment ID.
    produces:
      - application/json
  api/post/comment/:id/:comment_id:
    post:
      security:
        Bearer: []
      tags:
        - Comment on posts
      summary: Authorized logged in user can comment the posts
      description: Authorize access
      operationId: UserPosts
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The comment ID.
    produces:
      - application/json
    definitions:
  SignupUserRequest:
    type: object
    properties:
      name:
        type: string
        description: name of the new user
      email:
        type: string
        description: Email address of the new user
      password:
        type: string
        description: Password of the new user
        format: password
        x-obfuscated: true
    required:
      - name
      - password
      - email
    example:
      name: devconnector
      email_address: test@devconnector.com
      password: 123456
      password2: 123456
